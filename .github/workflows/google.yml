name: Build and Deploy to Cloud Run

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]

env:
  PROJECT_ID: '${{ secrets.GCP_PROJECT_ID }}' # TODO: update Google Cloud project id
  GAR_LOCATION: '${{ secrets.YOUR_GAR_LOCATION }}' # TODO: update Artifact Registry location
  SERVICE: '${{ secrets.YOUR_SERVICE_NAME }}' # TODO: update Cloud Run service name
  IMAGE: '${{ secrets.YOUR_IMAGE_NAME }}'
  PORT: '${{ secrets.PORT }}'
  GKE_CLUSTER: autopilot-cluster-1    # TODO: update to cluster name
  GKE_ZONE: us-central1   # TODO: update to cluster zone
  DEPLOYMENT_NAME: config-server # TODO: update to deployment name
  #REGION: '${{ secrets.YOUR_SERVICE_REGION }}' # TODO: update Cloud Run service region

jobs:
  build_and_deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
    
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          token_format: 'access_token'
          workload_identity_provider: '${{ secrets.WIF_PROVIDER }}' # e.g. - projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}' # e.g. - my-service-account@my-project.iam.gserviceaccount.com

      - name: Set up JDK 17
        uses: actions/setup-java@v3 
        with:
         java-version: '17'
         distribution: 'temurin'
         server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
         settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Maven Build
        run:  mvn clean install -s $GITHUB_WORKSPACE/settings.xml
        env:
            GITHUB_TOKEN: ${{ github.token }}

      - name: Docker Build Image
        run : docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE }}:${{ github.sha }} . 

      - name: Docker Push to Registry
        run: docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.IMAGE }}:${{ github.sha }}

      - name: Set up Kustomize
        run: |-
               curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
               chmod u+x ./kustomize

      - name: Assign Image Name
        id: assign_image_name
        run: |
            IMAGE_NAME="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"
            echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
      - name: Deploy
        run: |-
            ./kustomize edit set image ${{ env.IMAGE_NAME }}
            ./kustomize build . | kubectl apply -f -
            kubectl rollout status deployment/$DEPLOYMENT_NAME
            kubectl get services -o wide
